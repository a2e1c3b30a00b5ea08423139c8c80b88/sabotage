#!/bin/awk -f
# use: $0 <package> [<package>...]
# prints all packages that would be built by building <package>(s), in build order.
BEGIN {
	if (!ENVIRON["S"]) {
		error("$S is not set. be sure to source config: . ./config")
	}
	if (ARGC<2) usage()

	if(norecurse!=1) dorecurse=1
	debugmode=ENVIRON["DEBUG"]
	if(!ENVIRON["DEPS"]) ENVIRON["DEPS"]="all"
	split(ENVIRON["DEPS"],x,":")
	for(a in x) {
		if(x[a]=="all") {
			DEPTYPES["build"]="deps";
			DEPTYPES["host"]="deps.host";
			DEPTYPES["run"]="deps.run";
		} else {
			DEPTYPES[x[a]]= x[a]=="build"?"deps":"deps." x[a];
		}
	}
	recursion=0
	for(a=1; a<ARGC; a++) {
		n=split(ARGV[a],b_a,"/")
		print_build_order(b_a[n])
	}
}

function eprint(msg) {
	print msg > "/dev/stderr"
}
function error(msg) {
	eprint("error: " msg)
	exit 1
}
function usage() {
	eprint("usage: butch-deps [OPTIONS] pkg [pkg2...pkgN]")
	eprint("print dependencies for pkg(s) in build order")
	eprint("")
	eprint("options:")
	eprint("-v exclusive=1 print deps, but not the pkg itself")
	eprint("-v norecurse=1 don't recurse into deps")
	eprint("")
	eprint("influential environment variables:")
	eprint("S   : sabotage source dir containing pkg/")
	eprint("DEPS: colon-separated list of dependency sections")
	exit 1
}

function has_alternative_provider_dep(pkg,         i,pd) {
	pd = "deps." pkg ".";
	for(i in DEPTYPES) {
		if(substr(DEPTYPES[i],1,length(pd)) == pd)
			return 1;
	}
	return 0;
}

function print_build_order(pkg,		inDepsSection, dep, pkgFile,i,foo) {
	pkgFile=ENVIRON["S"] "/pkg/" pkg
	if (SEEN[pkg]) {
		return
	}
	recursion++;
	if(debugmode) {
		if(debugmode > 1) eprint("< " pkgFile " :")
		foo=""
		for(i=0;i<recursion;i++) foo = foo "-"
		eprint(foo pkg)
	}
	while ((r = getline < pkgFile) == 1) {
		dep=$0
		if (/^\[deps(\.([-a-zA-Z0-9.])+)?\]$/) {
			inDepsSection=0
			for(i in DEPTYPES) {
				if ($0 == "[" DEPTYPES[i] "]") {
					inDepsSection=1
					break
				}
			}
			if(!inDepsSection && $0 == "[deps." pkg ".default]" && !has_alternative_provider_dep(pkg))
				inDepsSection=1
			continue
		}
		if (/\[/) {
			inDepsSection=0
		}
		if (/^[ \t]*$/ || !inDepsSection) {
			continue
		}
		if(recursion == 1 || dorecurse) print_build_order(dep)
	}
	if (r == -1) {
		error("unable to read from " pkgFile)
	}
	if(SEEN[pkg]) {
		error("circular dependency detected for " pkg ".")
	}
	SEEN[pkg]=1
	close(pkgFile)
	recursion--
	if(!(exclusive == 1 && recursion == 0)) print pkg
}
