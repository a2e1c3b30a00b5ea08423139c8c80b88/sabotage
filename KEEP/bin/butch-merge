#!/bin/sh
[ -n "$CONFIG" ] && . $CONFIG
[ -z "$S" ] && { "error: S not set" ; exit 1; }
AWK=awk
type awk >/dev/null 2>&1 || AWK="busybox awk"
BINDIR=$(dirname $(readlink -f "$0"))
usage() {
cat << EOF
$0 pkg filename-of-template
merges pkg with template and writes the result to stdout.
EOF
}
[ -z "$2" ] && usage
GREP=grep
echo ABC | $GREP ABC >/dev/null 2>&1 || GREP="busybox grep"
echo ABC | $GREP ABC >/dev/null || {
	echo "error: grep not working!">&2
	exit 1
}
test $(echo ABC | sed 's/ABC/abc/') = abc || {
	echo "error: sed not working!">&2
	exit 1
}
test $(echo "ABC abc" | $AWK '{print $2}') = abc || {
	echo "error: awk not working!">&2
	exit 1
}
pkg="$(basename "$1")"
template="$2"
[ -r "$S/pkg/$pkg" ] && [ -r "$2" ] || { echo "error could not read $S/pkg/$pkg and $2"; exit 1; }
hasbuild=false
$GREP -x '\[build\]' "$S/pkg/$pkg" >/dev/null 2>&1 && hasbuild=true
mirrors=$($AWK -f $BINDIR/butch-printsec "$pkg" mirrors | sed 's/\n/ /g')
while read -r line ; do
case "$line" in
%BUTCH_CONFIG*)
 if [ -n "$CONFIG" ] ; then
  $GREP -v '^#' < "$CONFIG"
 else
cat << EOF
export A=$A
export R=$R
export S=$S
export C=$C
export K=$K
export B=$B
EOF
 fi
 $hasbuild || echo 'skip_build=true'
 $AWK -f $BINDIR/butch-printsec "$pkg" vars
 cat << EOF
BUTCH_PACKAGE_NAME=$pkg
BUTCH_MIRROR_URLS="$mirrors"
EOF
;;
%BUTCH_BUILDSCRIPT*)
 if $hasbuild ; then
	$AWK -f $BINDIR/butch-printsec "$pkg" build
 else
	echo "exit 0"
 fi
;;
*%BUTCH_MIRROR_URLS*|*%BUTCH_PACKAGE_NAME*)
	printf "%s\n" "$line" | sed -e 's/%BUTCH_MIRROR_URLS/$BUTCH_MIRROR_URLS/g' \
	-e 's/%BUTCH_PACKAGE_NAME/$BUTCH_PACKAGE_NAME/g'
;;
*) printf "%s\n" "$line" ;;
esac
done < "$template"
