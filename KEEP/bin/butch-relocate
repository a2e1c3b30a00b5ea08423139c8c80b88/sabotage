#!/bin/sh
#set -x
echo() { printf "%s\n" "$*" ; }
# use own pure shell basename impl to avoid forking overhead
basename() { echo "${1##*/}" ; }
[ -z "$butch_do_overwrite_on_copy" ] && butch_do_overwrite_on_copy=false
[ -z "$butch_staging_dir" ] && butch_staging_dir=/opt
if ! type awk >/dev/null 2>&1 ; then
	echo "error: this program requires a working awk installed."
	exit 1
fi

linkdir() {
 local src="$1"
 local dst="$2"
 local back_src="$3"
 test -d "$dst" || mkdir -p "$dst"
 for i in "$src"/* ; do
  local srcbas="$(basename "$src")"
  local ibas="$(basename "$i")"
  local target="${dst}/${ibas}"
  if [ "$ibas" = '*' ] ; then :
  elif [ ! -L "$i" ] && [ -d "$i" ] ; then
   linkdir "$i" "$target" "../${back_src}/${srcbas}"
  elif [ -f "$i" ] || [ -L "$i" ] ; then
   if [ -d "$target" ] ; then
    if [ -L "$target" ] ; then
     unlink "$target"
    else
     echo "WARNING: LN OVER DIR" ; exit 1
    fi
   fi
   ln -sf "${back_src}/${srcbas}/${ibas}" "$target"
  else
   [ -n "$V" ] && echo "ignoring unknown file $target"
  fi
 done
}

copydir() {
 # we can't just cp -a the entire basedir and be done because
 # sabotage's default is to not overwrite existing files in the
 # locations where we use copies instead of links.
 local src="$1"
 local dst="$2"
 test -d "$dst" || mkdir -p "$dst"
 for i in "$src"/* ; do
  local ibas="$(basename "$i")"
  local target="${dst}/${ibas}"
  if [ "$ibas" = '*' ] ; then :
  elif [ ! -L "$i" ] && [ -d "$i" ] ; then
   copydir "$i" "$target"
  elif [ -f "$i" ] || [ -L "$i" ] ; then
   if $butch_do_overwrite_on_copy || [ ! -e "$target" ] ; then
    echo cp -a "$i" "$target"
    cp -a "$i" "$target"
   fi
  else
   [ -n "$V" ] && echo "ignoring unknown file $target"
  fi
 done
}
path_count() {
 printf "%s\n" "$1" | awk '{n=split($0,a,"/"); print n-1;}'
}
path_comp() {
 # +2 because awk is 1-based and first array entry is empty
 printf "%s\n" "$1" | awk -v i=$2 '{n=split($0,a,"/"); print a[i+2];}'
}

linktree_i() {
 src=$(readlink -f "$1")
 dst=$(readlink -f "$2")
 [ -z "$src" ] && return 1
 if [ -z "$dst" ] ; then
	echo "warning: creating base directory $2">&2
	echo "this directory is supposed to exist already.">&2
	echo "fix its permissions after this task.">&2
	mkdir -p "$2" || return 1
	dst=$(readlink -f "$2")
	[ -z "$dst" ] && return 1
 fi
 if "$3" ; then
   copydir "$src" "$dst"
   return "$?"
 fi
 cnt_src=$(path_count "$src")
 cnt_dst=$(path_count "$dst")
 if test $cnt_src -gt $cnt_dst ; then
  n=$cnt_dst
 else
  n=$cnt_src
 fi
 i=0
 while test $i -lt $n ; do
  test "$(path_comp "$src" $i)" != "$(path_comp "$dst" $i)" && break
  i=$((i + 1))
 done
 ncommon=$i
 back_src=
 while test $i -lt $cnt_dst ; do
  if test -z "$back_src" ; then
   back_src=..
  else
   back_src="../${back_src}"
  fi
  i=$((i + 1))
 done
 i=$ncommon
 while test $i -lt $((cnt_src - 1)) ; do
  back_src="${back_src}/$(path_comp "$src" $((i)))"
  i=$((i + 1))
 done
 linkdir "$src" "$dst" "$back_src"
}

linktree() {
 linktree_i "$1" "$2" false
}

copytree() {
 linktree_i "$1" "$2" true
}

if [ -z "$1" ] ; then
	echo "tool to manually symlink a built package"
	echo "(i.e. the ones in $butch_staging_dir/packagename)"
	echo "into /"

	echo "error: need to pass package name to relocate" >&2
	exit 1
fi

test -n "${R+set}" || {
	echo "error: R not set. make sure to run this via the butch wrapper">&2
	exit 1
}

BINDIR="$(dirname "$(readlink -f "$0")")"

# butch_no_relocate_c: give the user an option to bail out from using the faster C binary.
if test -z "$butch_no_relocate_c" && test -n "$K" && test -w "$BINDIR" ; then
	expected_relcver=1
	relcver=$("$BINDIR"/butch-relocate-c --version 2>/dev/null)
	# compile the relocate-c binary: if it doesn't exist, can't be executed, or is of the wrong version.
	if test $? != 0 || test "$relcver" != $expected_relcver ; then
		test -z "$CC" && CC=cc
		$CC -O1 "$K"/butch_relocate.c -o "$BINDIR"/butch-relocate-c -static -s
		relcver=$("$BINDIR"/butch-relocate-c --version 2>/dev/null)
	fi
	if test "$relcver" = $expected_relcver ; then
		exec "$BINDIR"/butch-relocate-c "$@"
	fi
	echo "warning: falling back to shell impl of butch-relocate">&2
fi

ec=0

for pkg ; do
	[ "$R" = "/" ] && R=
	butch_install_dir="$R""$butch_staging_dir"/"$pkg"
	if ! [ -d "$butch_install_dir" ] ; then
		echo "warning: package $pkg does not seem to be installed" >&2
		ec=1
		continue
	fi
	for loc in bin sbin include lib libexec share ; do
		sourcedir="$butch_install_dir""$butch_prefix"/"$loc"
		[ -d "$sourcedir" ] || continue
		linktree "$sourcedir" "$R""$butch_prefix"/"$loc" || ec=1
	done
	for loc in etc var boot ; do
		# no butch_prefix here because these are always in /
		sourcedir="$butch_install_dir"/"$loc"
		[ -d "$sourcedir" ] || continue
		if test $loc = boot ; then
			save_do_ow=$butch_do_overwrite_on_copy
			butch_do_overwrite_on_copy=true
		fi
		copytree "$sourcedir" "$R"/"$loc" || ec=1
		test $loc = boot && butch_do_overwrite_on_copy=$save_do_ow
	done
done

exit $ec
