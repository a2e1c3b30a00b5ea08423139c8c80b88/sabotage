[mirrors]
ftp://ftp.gnu.org/gnu/gdb/gdb-7.6.2.tar.bz2
http://ftp.gnu.org/gnu/gdb/gdb-7.6.2.tar.bz2

[vars]
filesize=24269334
sha512=e72e9c2abb58cc08c38841380270fe783f26baf62798171d21cf0843e6c9a81d285f424dc6229ea7b1c6c957d999c8aa75c2bd15076817abb9caab28c4eb7666
desc='the GNU debugger. debug applications created in asm, C, C++'
pkgver=3
gdb_major=7
gdb_minor=6

[deps]
kernel-headers
termcap
gettext
readline
zlib

[build]
#bash dependency: see https://sourceware.org/bugzilla/show_bug.cgi?id=16370
#fix missing "makeinfo" requirement...
find . -name 'configure' -exec sed -i 's,MAKEINFO="$MISSING makeinfo",MAKEINFO=true,' '{}' \;

# remove hardcoded -O2 -g CFLAGS which are *not* overridable (i.e. always appended, taking precedence)
find . -name configure -exec sed -e 's/CFLAGS="-g -O2"/:/g' -e 's/CFLAGS="-O2"/:/g' -i "{}" \;

# fixme: need to fix interpreter names for other archs too
sed -e 's@ld64.so.1@ld-musl-x86_64.so.1@' -e 's@ldx32.so.1@ld-musl-x32.so.1@' \
  -i bfd/elf64-x86-64.c

for f in gdb/main.c gdb/top.c ; do
sed -e 's/DEBUGDIR_RELOCATABLE/0/g' -i "$f"
done

if test $gdb_major = 7 && test $gdb_minor -lt 11 ; then
patch -p1 < "$K"/gdb-76-aarch64-linux-nat.patch
fi
if test $gdb_major = 7 && test $gdb_minor = 11 ; then
sed -e s_asm/ptrace_sys/ptrace_ -i gdb/nat/aarch64-linux.c -i gdb/aarch64-linux-nat.c
fi
if test $gdb_major = 7 && test $gdb_minor -lt 10 ; then
# testme: it's unknown whether gdb >= 7.10 thread debugging works, as
# the gdb-linux_nat_thread.patch patch doesn't apply anymore.
patch -p1 < "$K"/gdb-linux_nat_thread.patch
patch -p1 < "$K"/gdb-arm-gentmap.patch
patch -p1 < "$K"/gdb-76-readline.patch
fi
if test $gdb_major = 7 && test $gdb_minor -lt 9 ; then
patch -p1 < "$K"/gdb-amd64-debugreg.patch
patch -p1 < "$K"/gdb-76-configure-ash.patch
fi
if test $gdb_major = 7 && test $gdb_minor -lt 8 ; then
patch -p1 < "$K"/gdb-76-pid_t.patch
fi
if test $gdb_major = 7 && test $gdb_minor -lt 7 ; then
patch -p1 < "$K"/gdb-threaddb.patch
patch -p1 < "$K"/gdb-76-linux-low-threaddb.patch
patch -p1 < "$K"/gdb-76-debuglink-dir.patch
else # for all gdb versions > 7.6
patch -p1 < "$K"/gdb-77-debuglink-dir.patch
fi
# these apply to all versions supported
patch -p1 < "$K"/gdb-7.12-signals.patch
patch -p1 < "$K"/gdb-linux_nat.patch
patch -p1 < "$K"/gdb-76-dynamic-libc-step.patch

# fix mips build ...
cp "$K"/gdb-sgidefs.h gdb/sgidefs.h

"$K"/libibertyfix libiberty
# total madness: gdb uses libiberty *AND* gnulib
"$K"/gnulibfix gdb/gnulib/import

mkdir build
cd build
cp -f "$K"/config.cache .
# fixing implicit declaration in recursively called (by make) configure tests...
cat << EOF >> config.cache
bash_cv_must_reinstall_sighandlers=yes
bash_cv_func_sigsetjmp=yes
bash_cv_func_strcoll_broken=no
bash_cv_func_ctype_nonascii=no
ac_cv_func_strncmp_works=yes
ac_cv_func_strstr=yes
ac_cv_c_stack_direction=-1
gt_cv_func_gnugettext1_libintl=yes
EOF
# readline and and libiberty have broken checks; but we have to copy config.cache
# everywhere to get cache.
for culprit in readline libiberty libdecnumber opcodes readline bfd ; do
	mkdir -p $culprit
	cp config.cache $culprit/
done
if test $gdb_major = 7 && test $gdb_minor -lt 10 ; then
sed -i 's/noconfigdirs=""/noconfigdirs="intl readline"/' ../configure
# let's use libedit in lieu of readline and save us from the in-tree compile of the latter...
ln -sf "$butch_root_dir""$butch_prefix"/lib/libreadline.a readline/libreadline.a
else
# fixme: gdb starting with 7.10 uses more readline stuff like rl_ding(), not provided by libedit
sed -i 's/noconfigdirs=""/noconfigdirs="intl"/' ../configure
fi
archflags=
if [ "$A" = "powerpc" ] ; then
	cp "$K"/ppc-regs.h .
	archflags="-include $PWD/ppc-regs.h"
fi

gdbserverflags="--enable-gdbserver=no"
[ "$WANT_GDBSERVER" = 1 ] && gdbserverflags="--enable-gdbserver=yes --disable-inprocess-agent"
# gdbserver tries to build some .so for inprocess-agent, but it doesnt strip away -static
# from LDFLAGS, so it tries to link the .so with -shared -static, which can't work

static_ldflags=-static
pythonflags=
[ "$WANT_PYTHON" = 1 ] && {
	pythonflags="--with-python"
	GDB_DYNAMIC=1
	[ -d "$butch_root_dir""$butch_prefix"/include/python2.7 ] && \
	CPPFLAGS="-I ""$butch_root_dir""$butch_prefix"/include/python2.7
	export CPPFLAGS
} || pythonflags="--without-python"
[ "$GDB_DYNAMIC" = 1 ] && static_ldflags= ||  { \
	sed -i 's@RDYNAMIC=@RDYNAMIC= #@g' ../gdb/configure
	sed -i 's@RDYNAMIC=@RDYNAMIC= #@g' ../gdb/gdbserver/configure
}
tuiflags=
[ "$WANT_TUI" = 1 ] || tuiflags=--disable-tui

xconfflags=
targets="--enable-64-bit-bfd --enable-targets=x86_64-linux,i386-linux,powerpc-linux,arm-linux,mips-linux,mipsel-linux,microblaze-linux,aarch64-linux"
if [ -n "$CROSS_COMPILE" ] ; then
	xconfflags="--host=$($CC -dumpmachine)"
	targets=
fi

echo "XXX build config: dynamic: $GDB_DYNAMIC, tui: $WANT_TUI, gdbserver: $WANT_GDBSERVER, python: $WANT_PYTHON"

export gl_cv_func_readlink_works=yes
export gl_cv_have_raw_decl_gettimeofday=yes

LDFLAGS="$static_ldflags $optldflags" \
CFLAGS="-Dgnu_fnmatch=fnmatch -Drpl_strstr=strstr \
 -Drpl_gettimeofday=gettimeofday \
 -Dhistory_max_entries=max_input_history \
 -D_GNU_SOURCE -D_LARGEFILE64_SOURCE -D_rl_echoing_p=readline_echoing_p \
  -O0 $optcflags $archflags" \
../configure -C \
  --prefix="$butch_prefix" --disable-werror --disable-tls \
  --with-system-zlib=yes $gdbserverflags $xconfflags $targets \
  --with-separate-debug-dir="$butch_prefix"/lib/debug \
  $pythonflags \
  --disable-sim \
  $tuiflags

make -j$MAKE_THREADS
make DESTDIR="$butch_install_dir" install-gdb

